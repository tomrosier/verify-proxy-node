buildscript {
    repositories {
        if (System.getenv('VERIFY_USE_PUBLIC_BINARIES') == 'true') {
            logger.warn('Production builds MUST NOT be built with public binaries.\nUse artifactory/whitelisted-repos for production builds.\n\n')
            maven { url 'https://dl.bintray.com/alphagov/maven-test' }
            jcenter()
        } else {
            maven { url 'https://artifactory.ida.digital.cabinet-office.gov.uk/artifactory/whitelisted-repos' }
        }
    }
    dependencies {
        classpath 'com.github.spullara.mustache.java:compiler:0.9.6',
                'org.yaml:snakeyaml:1.24',
                'com.google.guava:guava:27.1-jre',
                'com.github.ben-manes:gradle-versions-plugin:0.20.0'
    }
}

plugins {
    id 'com.gradle.build-scan' version '2.4.1'
}

apply plugin: 'java'
apply plugin: 'com.github.ben-manes.versions'

allprojects {
    apply plugin: 'jacoco'
}

repositories {
    jcenter()
}

ext {
    opensaml_version = '3.4.3'
    dropwizard_version = '1.3.14'
    utils_version = '2.0.0-371'
    saml_lib_version = "${opensaml_version}-210"
    build_version = "$opensaml_version-${System.env.BUILD_NUMBER ?: 'SNAPSHOT'}"
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'maven'

    group = "uk.gov.ida"
    version = "0.1.$version"

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    task createPoms {
        doLast {
            pom {
                project {
                    groupId project.group
                    artifactId project.name
                    version project.version
                }
            }.writeTo("$rootDir/libs/$project.name/pom.xml")
        }
    }

    if (project.hasProperty('CI')) {
        test {
            testLogging {
                exceptionFormat = 'full'
            }
        }
    } else {
        build.dependsOn createPoms
        test.dependsOn createPoms
    }

    repositories {
        if (System.getenv('VERIFY_USE_PUBLIC_BINARIES') == 'true') {
            logger.warn('Production builds MUST NOT be built with public binaries.\nUse artifactory/whitelisted-repos for production builds.\n\n')
            maven { url 'https://dl.bintray.com/alphagov/maven-test' }
            maven { url 'https://dl.bintray.com/alphagov/maven' }
            maven { url 'https://build.shibboleth.net/nexus/content/repositories/releases' }
            jcenter()
        } else {
            maven { url 'https://artifactory.ida.digital.cabinet-office.gov.uk/artifactory/whitelisted-repos' }
        }
    }

    sourceSets {
        test {
            resources.srcDirs += ["src/dist"]
        }
    }

    configurations {
        common
        dev_pki
        dropwizard
        dropwizard_assets
        opensaml
        eidas_saml
        ida_utils
        verify_saml
        verify_saml_test
        proxy_node_test
        soft_hsm
    }
//    If any configurations are added/changed please ensure their dependencies are still being tested and monitored by
//    Snyk. See the Snyk directory in the root of the project.
    dependencies {
        configurations.all {
            resolutionStrategy.dependencySubstitution {
                substitute module("com.fasterxml.jackson.core:jackson-databind") because "https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-467014" with module("com.fasterxml.jackson.core:jackson-databind:2.10.0.pr3")
                substitute module("ca.juliusdavies:not-yet-commons-ssl:0.3.9") because "https://snyk.io/vuln/SNYK-JAVA-CAJULIUSDAVIES-30073" with module("ca.juliusdavies:not-yet-commons-ssl:0.3.11")
                substitute module("org.apache.santuario:xmlsec") because "https://snyk.io/vuln/SNYK-JAVA-ORGAPACHESANTUARIO-460281" with module("org.apache.santuario:xmlsec:2.1.4")
                exclude group: "commons-beanutils", module: "commons-beanutils"
            }
        }

        common(
                "javax.xml.bind:jaxb-api:2.3.0",
                "javax.activation:activation:1.1.1",
                "io.lettuce:lettuce-core:5.1.4.RELEASE",
                "engineering.gds-reliability:gds-metrics-dropwizard:0.7.0"
        )

        dropwizard(
                "io.dropwizard:dropwizard-core:${dropwizard_version}",
                "io.dropwizard:dropwizard-client:${dropwizard_version}",
                "io.dropwizard:dropwizard-views-mustache:${dropwizard_version}",
                "io.dropwizard:dropwizard-json-logging:${dropwizard_version}",
                "uk.gov.ida:dropwizard-logstash:1.3.5-68"
        )

        dropwizard_assets(
                "io.dropwizard:dropwizard-assets:${dropwizard_version}",
        )

        opensaml(
                "org.opensaml:opensaml-core:${opensaml_version}",
                "org.opensaml:opensaml-saml-impl:${opensaml_version}",

                compile("org.opensaml:opensaml-storage-impl:${opensaml_version}") {
                    exclude group: 'org.ldaptive', module: 'ldaptive'
                    exclude group: 'org.glassfish', module: 'javax.json'
                    exclude group: 'org.hibernate', module: 'hibernate-entitymanager'
                }
        )

        constraints {
            opensaml("commons-collections:commons-collections:3.2.2") {
                because "opensaml:3.4.0 has a dep on commons-collections:3.2.1 which is vulnerable to CVE-2015-7501"
            }
            opensaml("org.bouncycastle:bcprov-jdk15on:1.60") {
                because "opensaml:3.4.0 has a dep on bcprov-jdk15on:1.59 which is vulnerable to CVE-2018-1000180"
            }
            opensaml("com.google.guava:guava:24.1.1-jre") {
                because "opensaml:3.4.0 has a dep on guava:20.0.0 which is vulnerable to CVE-2018-10237"
            }
        }

        eidas_saml(
                "se.litsec.eidas:eidas-opensaml3:1.3.1",
                "se.litsec.opensaml:opensaml3-ext:1.2.2",
        )

        ida_utils(
                "uk.gov.ida:rest-utils:${utils_version}"
        )

        verify_saml(
                "uk.gov.ida:saml-lib:${saml_lib_version}",
                "uk.gov.ida:security-utils:${utils_version}"
        )

        constraints {
            verify_saml("org.bouncycastle:bcprov-jdk15on:1.60") {
                because "saml_lib_version 185 has a dep on bcprov-jdk15on:1.59 which is vulnerable to CVE-2018-1000180"
            }
        }

        dev_pki(
                "uk.gov.ida:ida-dev-pki:1.1.0-38"
        )

        verify_saml_test(
                "uk.gov.ida:saml-test:${saml_lib_version}",
        )

        proxy_node_test(
                "net.sourceforge.htmlcleaner:htmlcleaner:2.22",
                "net.sourceforge.htmlunit:htmlunit:2.28",
                "org.bouncycastle:bcpkix-jdk15on:1.62",
        )

        testCompile(
                "org.junit.jupiter:junit-jupiter-api:5.5.1",
                'org.junit.jupiter:junit-jupiter-params:5.5.1',
                "org.assertj:assertj-core:3.13.2",
                "org.mockito:mockito-core:3.0.0",
                "org.mockito:mockito-junit-jupiter:3.0.0",
                "io.dropwizard:dropwizard-testing:${dropwizard_version}",
                "net.sourceforge.htmlunit:htmlunit:2.35.0",
                "com.github.stefanbirkner:system-rules:1.19.0",
                "com.github.fppt:jedis-mock:0.1.9",
                "it.ozimov:embedded-redis:0.7.2",
                "uk.gov.ida:ida-dev-pki:1.1.0-37",
                "org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:2.25.1",
                "org.glassfish.jersey.connectors:jersey-jetty-connector:2.25.1",
                project(':proxy-node-test'),
        )

        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.2'
    }
}

task jacocoMerge(type: JacocoMerge) {
    destinationFile = file("$buildDir/jacoco/allTestCoverage.exec")
    executionData = project.fileTree(dir: '.', include: '**/build/jacoco/*est.exec')
    jacocoClasspath = project.files(project.configurations.jacocoAnt)
}

task jacocoRootReport(type: JacocoReport) {
    dependsOn jacocoMerge

    additionalSourceDirs files(subprojects.sourceSets.main.allSource.srcDirs)
    additionalClassDirs files(subprojects.sourceSets.main.output)
    executionData jacocoMerge.destinationFile

    reports {
        html.enabled = true
        xml.enabled = true
    }

    doFirst {
        executionData files(executionData.findAll { it.exists() })
    }
}

buildScan {
    publishOnFailureIf(project.hasProperty('CI'))
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

defaultTasks 'clean', 'test'
